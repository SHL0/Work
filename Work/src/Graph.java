import java.awt.Font;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.Map.Entry;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

public class Graph extends Wordcount{
	ChartPanel frame1;
	public  Graph(Map<String, Integer> Map1,String s1){

		DefaultCategoryDataset dataset = getDataSet(Map1,s1);
        JFreeChart chart = ChartFactory.createBarChart3D(
       		                 "单词频数", // 图表标题
                            " ", // 目录轴的显示标签
                          //  "数量", // 数值轴的显示标签
                            "单词表",
                            dataset, // 数据集
                            PlotOrientation.VERTICAL, // 图表方向：水平、垂直
                            true,           // 是否显示图例(对于简单的柱状图必须是false)
                            false,          // 是否生成工具
                            false           // 是否生成URL链接
                            );
        
        //从这里开始
        CategoryPlot plot=chart.getCategoryPlot();//获取图表区域对象
       CategoryAxis domainAxis=plot.getDomainAxis();         //水平底部列表
      //   domainAxis.setLabelFont(new Font("黑体",Font.BOLD,14));         //水平底部标题
         domainAxis.setTickLabelFont(new Font("宋体",Font.BOLD,12));  //垂直标题
         ValueAxis rangeAxis=plot.getRangeAxis();//获取柱状
         rangeAxis.setLabelFont(new Font("黑体",Font.BOLD,15));
          chart.getLegend().setItemFont(new Font("黑体", Font.BOLD, 15));
          chart.getTitle().setFont(new Font("宋体",Font.BOLD,20));//设置标题字体
          
          //到这里结束，虽然代码有点多，但只为一个目的，解决汉字乱码问题
          
         frame1=new ChartPanel(chart,true);        //这里也可以用chartFrame,可以直接生成一个独立的Frame
         
	}
	/*private static DefaultCategoryDataset getDataSet() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(100, "苹果", "苹果");
        dataset.addValue(200, "梨子", "梨子");
        dataset.addValue(300, "葡萄", "葡萄");
        dataset.addValue(400, "香蕉", "香蕉");
        dataset.addValue(500, "荔枝", "荔枝");
        return dataset;
        
}*/
	public DefaultCategoryDataset getDataSet(Map<String, Integer> Map,String s) {

		Map<String,Integer> Map2 = new TreeMap<String, Integer>(); 
		String[] word= s.split(",");
		for(int i=0; i<word.length; i++) {
        	for(Entry<String,Integer> entry : Map.entrySet()) { 
        		if(word[i].equals(entry.getKey()))
        		{
        			 Map2.put(entry.getKey(), entry.getValue());
        			 break;
        		}
            } 
        }
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
		Set<Entry<String,Integer>> mapEntrySet = Map2.entrySet();
		for(Entry<String,Integer> entry : Map2.entrySet()) {
            Integer value=entry.getValue();
            dataset.setValue((Number)value,entry.getKey(),entry.getKey());
        }
		return dataset;		
		
	}	
	public ChartPanel getChartPanel(){
		return frame1;
		
	}
}